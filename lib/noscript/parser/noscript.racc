#
# Noscript grammar.
#

class Noscript::Parser

prechigh
    nonassoc UMINUS
    left '*' '/'
    left '+' '-'
preclow

rule
  target : statements { result = AST::Nodes.new(val[0]) }
         | /* none */ { 0 }

  assignment : identifier ASSIGN statement { result = AST::AssignNode.new(val[0], val[2]) }

  method_definition : DEF IDENTIFIER LPAREN parameter_list RPAREN end_of_statement statements END { result = AST::DefMethod.new(val[1], val[3], AST::Nodes.new(val[6])) }

  identifier : IDENTIFIER { result = AST::Identifier.new(val[0]) }

  digit : DIGIT { result = AST::Digit.new(val[0]) }
  string : STRING { result = AST::String.new(val[0]) }

  literal : digit
          | string
          | operation

  argument : identifier
           | literal
           | method_call

  argument_list : { result = [] }
                | argument  { result = [val[0]] }
                | argument_list COMMA argument { result.push(val[2]) }

  parameter : identifier ASSIGN argument { result = AST::DefaultParameter.new(val[0], val[2])}
            | identifier

  parameter_list : { result = [] }
                 | parameter { result = [val[0]] }
                 | parameter_list COMMA parameter { result.push(val[2]) }

  statement : assignment
            | operation
            | method_call
            | digit
            | string
            | method_definition
            | statement end_of_statement

  op_member : digit
            | identifier
            | method_call
            | operation

  operation : op_member '+' op_member { result = AST::AddNode.new(val[0], val[2]) }
            | op_member '-' op_member { result = AST::SubtractNode.new(val[0], val[2]) }
            | op_member '*' op_member { result = AST::MultiplicationNode.new(val[0], val[2]) }
            | op_member '/' op_member { result = AST::DivisionNode.new(val[0], val[2]) }
            | LPAREN op_member RPAREN { result = val[1] }
            | '-' op_member  =UMINUS { result = AST::UnaryMinus.new(val[1]) }

  statements : { result = [] }
             | statement { result = [val[0]] }
             | statements statement { result.push(val[1]) }

  end_of_statement : SEMICOLON | NEWLINE

  method_call : IDENTIFIER LPAREN argument_list RPAREN
                {
                  result = AST::MethodCall.new(val[0], val[2])
                }


---- header ----
#
# generated by racc
#
require_relative 'noscript.rex'

---- inner ----

---- footer ----
